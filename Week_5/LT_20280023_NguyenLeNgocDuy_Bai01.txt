import numpy as np
import matplotlib.pyplot as plt

class GradientDescent:
    def __init__(self, func, deriv, learning_rate=0.01, precision=0.0001, max_iters=10000):
        self.func = func
        self.deriv = deriv
        self.learning_rate = learning_rate
        self.precision = precision
        self.max_iters = max_iters
    
    def optimize(self, iters, x):
        x_new = x
        if iters > self.max_iters:
            iters = self.max_iters
        for _ in range(iters):
            x_new = x_new - self.learning_rate * self.deriv(x_new)
            if np.linalg.norm(self.deriv(x_new)) < self.precision:
                break
        return x_new
    
def func(x):
    return x ** 2 + 5 * np.sin(x)

def deriv(x):
    return 2 * x + 5 * np.cos(x)

if __name__ == "__main__":
    grad_desc = GradientDescent(func, deriv)
    x_opt = grad_desc.optimize(1000, 2)
    t = np.linspace(-10, 10, 100)
    plt.plot(t, func(t), color='b')
    plt.plot(x_opt, func(x_opt), color='r', marker='o')
    plt.show()